{
  "count": 9447,
  "next": "https://solodit.xyz/api/issues/rest/?bookmarked=False&finder=&general_scores=&impact=HIGH%2CMEDIUM&keyword=&markasread=All&min_finders=1&page=2&pcategories=&protocol=&protocol_forked_from=&quality_scores=&report_date=&source=&tags=",
  "previous": null,
  "results": [
    {
      "bookmarked": false,
      "bookmarked_total": 0,
      "change_logs": [],
      "content": "##### Description\nThe last instruction of the `getPriceByExternal` function will always return the same price (30_000e18). \nhttps://github.com/DivergenceProtocol/diver-contracts/blob/e5286f94a7ccb9d6279fae51ea66a8833672628a/src/core/Oracle.sol#L43\nIt leads to the incorrect settles of battles. An attacker can use this code issue for getting profit from bets. \n##### Recommendation\nWe recommend removing the `return (30_000e18, 0)` instruction from the function.\n\n\n",
      "contest_link": "",
      "contest_prize_txt": "",
      "editor_comments": [],
      "finder_list": [
        "MixBytes"
      ],
      "finders_count": 1,
      "general_score": 0,
      "github_dicussion_no": 23433,
      "github_link": "",
      "id": 29436,
      "impact": "HIGH",
      "issue_protocol": {
        "category_list": [],
        "id": 1233,
        "name": "Divergence Protocol"
      },
      "issue_source": {
        "has_contest": false,
        "logo_horizontal_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_horizontal.png",
        "logo_square_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_square.png",
        "name": "MixBytes",
        "url": "https://mixbytes.io/"
      },
      "kind": "MARKDOWN",
      "markasread": false,
      "openai_explained": true,
      "pdf_link": "",
      "pdf_page_from": 0,
      "quality_score": 0,
      "report_date": "2023-12-28T00:00:00Z",
      "similar_issue_list": [
        {
          "id": 29444,
          "slug": "the-owner-can-manipulate-oracles-mixbytes-none-divergence-protocol-markdown",
          "title": "The owner can manipulate oracles"
        },
        {
          "id": 20852,
          "slug": "m-5-d3oracle-will-return-the-wrong-price-if-the-chainlink-aggregator-returns-price-outside-minmax-range-sherlock-none-dodo-v3-git",
          "title": "M-5: D3Oracle will return the wrong price if the Chainlink aggregator returns price outside min/max range"
        },
        {
          "id": 3350,
          "slug": "h-2-chainlinkoraclesolgetprice-the-price-will-be-wrong-when-the-tokens-usd-price-feeds-decimals-8-sherlock-sentiment-sentiment-git",
          "title": "H-2: `ChainlinkOracle.sol#getPrice()` The price will be wrong when the token's USD price feed's `decimals != 8`"
        }
      ],
      "slug": "debug-code-in-getpricebyexternal-mixbytes-none-divergence-protocol-markdown",
      "source_link": "https://github.com/mixbytes/audits_public/blob/master/Divergence%20Protocol/README.md#1-debug-code-in-getpricebyexternal",
      "sponsor_name": null,
      "summary": "\nThis bug report concerns the `getPriceByExternal` function in the Oracle.sol file. This function will always return the same price (30_000e18), which leads to incorrect settles of battles. An attacker can take advantage of this issue to make a profit from bets. The recommendation is to remove the `return (30_000e18, 0)` instruction from the function to fix the issue.",
      "tag_list": [],
      "title": "Debug code in `getPriceByExternal`",
      "user_note": {
        "created_at": null,
        "note": ""
      }
    },
    {
      "bookmarked": false,
      "bookmarked_total": 0,
      "change_logs": [],
      "content": "##### Description\nThe `Arena` smart contract contains a public [`createBattle`](https://github.com/DivergenceProtocol/diver-contracts/blob/e5286f94a7ccb9d6279fae51ea66a8833672628a/src/core/Arena.sol#L67) function that creates a new battle without initializing. This function is used in the `BattleInitializer`'s function [`createAndInitializeBattle`](https://github.com/DivergenceProtocol/diver-contracts/blob/e5286f94a7ccb9d6279fae51ea66a8833672628a/src/periphery/base/BattleInitializer.sol#L14). It means that an attacker can create a new battle and binds it to a fake manager behind the scene. Using the manager priviledge, the fake manager contract can mint spear and shield tokens and put them to the pool. A user will trade these tokens for collateral. At the end of the battle the attacker could withdraw assets using the [`collect`](https://github.com/DivergenceProtocol/diver-contracts/blob/e5286f94a7ccb9d6279fae51ea66a8833672628a/src/core/Battle.sol#L271) function of the battle.\n\n##### Recommendation\nWe recommend improving the access right model to disallow attackers to gain privileged access.\n\n\n",
      "contest_link": "",
      "contest_prize_txt": "",
      "editor_comments": [],
      "finder_list": [
        "MixBytes"
      ],
      "finders_count": 1,
      "general_score": 0,
      "github_dicussion_no": 23432,
      "github_link": "",
      "id": 29437,
      "impact": "HIGH",
      "issue_protocol": {
        "category_list": [],
        "id": 1233,
        "name": "Divergence Protocol"
      },
      "issue_source": {
        "has_contest": false,
        "logo_horizontal_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_horizontal.png",
        "logo_square_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_square.png",
        "name": "MixBytes",
        "url": "https://mixbytes.io/"
      },
      "kind": "MARKDOWN",
      "markasread": false,
      "openai_explained": true,
      "pdf_link": "",
      "pdf_page_from": 0,
      "quality_score": 0,
      "report_date": "2023-12-28T00:00:00Z",
      "similar_issue_list": [
        {
          "id": 29440,
          "slug": "the-startsqrtpricex96-manipulation-mixbytes-none-divergence-protocol-markdown",
          "title": "The `startSqrtPriceX96` manipulation"
        },
        {
          "id": 29446,
          "slug": "public-functions-for-withdrawn-assets-in-the-peripherypayments-contract-mixbytes-none-divergence-protocol-markdown",
          "title": "Public functions for withdrawn assets in the `PeripheryPayments` contract"
        },
        {
          "id": 29447,
          "slug": "lack-of-incentivization-of-the-battle-settlement-process-mixbytes-none-divergence-protocol-markdown",
          "title": "Lack of incentivization of the battle settlement process"
        }
      ],
      "slug": "battle-fishing-attack-mixbytes-none-divergence-protocol-markdown",
      "source_link": "https://github.com/mixbytes/audits_public/blob/master/Divergence%20Protocol/README.md#2-battle-fishing-attack",
      "sponsor_name": null,
      "summary": "\nThe Divergence Protocol is a smart contract that contains a public function called `createBattle`. This function is used to create a new battle, however it does not initialize the battle. An attacker could use this to gain access to the manager priviledge, allowing them to mint spear and shield tokens and put them in the pool. This would allow the attacker to withdraw assets at the end of the battle using the `collect` function of the battle. To prevent this, it is recommended to improve the access right model to disallow attackers from gaining privileged access.",
      "tag_list": [],
      "title": "Battle fishing attack",
      "user_note": {
        "created_at": null,
        "note": ""
      }
    },
    {
      "bookmarked": false,
      "bookmarked_total": 0,
      "change_logs": [],
      "content": "##### Description\nThe `redeemObligation` function does not change the state of the position to `ObligationRedeemed`. This allows an attacker to call it multiple times, potentially gaining an unlimited amout of the collateral token. Currently, this issue is unexploitable because of issue M.5 (described below), however, it becomes relevant if issue M.5 is fixed.\n##### Recommendation\nWe recommend changing the state of the position after redemption of the obligations to prevent multiple redemptions.\n\n\n",
      "contest_link": "",
      "contest_prize_txt": "",
      "editor_comments": [],
      "finder_list": [
        "MixBytes"
      ],
      "finders_count": 1,
      "general_score": 0,
      "github_dicussion_no": 23431,
      "github_link": "",
      "id": 29438,
      "impact": "HIGH",
      "issue_protocol": {
        "category_list": [],
        "id": 1233,
        "name": "Divergence Protocol"
      },
      "issue_source": {
        "has_contest": false,
        "logo_horizontal_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_horizontal.png",
        "logo_square_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_square.png",
        "name": "MixBytes",
        "url": "https://mixbytes.io/"
      },
      "kind": "MARKDOWN",
      "markasread": false,
      "openai_explained": true,
      "pdf_link": "",
      "pdf_page_from": 0,
      "quality_score": 0,
      "report_date": "2023-12-28T00:00:00Z",
      "similar_issue_list": [
        {
          "id": 29448,
          "slug": "the-redeemobligation-will-always-be-reverted-mixbytes-none-divergence-protocol-markdown",
          "title": "The `redeemObligation` will always be reverted"
        },
        {
          "id": 26239,
          "slug": "silent-failure-during-token-redemption-on-the-withdraw-function-halborn-none-qoda-finance-core-v1-security-assessment-pdf",
          "title": "SILENT FAILURE DURING TOKEN REDEMPTION ON THE WITHDRAW FUNCTION"
        },
        {
          "id": 16152,
          "slug": "m-09-last-trove-may-be-prevented-from-redeeming-code4rena-ethos-reserve-ethos-reserve-contest-git",
          "title": "[M-09] Last Trove may be prevented from redeeming"
        }
      ],
      "slug": "multiple-redemptions-of-position-are-possible-mixbytes-none-divergence-protocol-markdown",
      "source_link": "https://github.com/mixbytes/audits_public/blob/master/Divergence%20Protocol/README.md#3-multiple-redemptions-of-position-are-possible",
      "sponsor_name": null,
      "summary": "\nThis bug report concerns the `redeemObligation` function, which is used to redeem obligations. The problem is that the function does not change the state of the position to `ObligationRedeemed`, which allows an attacker to call the function multiple times and potentially gain an unlimited amount of the collateral token. Currently, this issue is not exploitable due to another issue (M.5), but it could become relevant if that issue is fixed.\n\nThe recommendation is to change the state of the position after redemption of the obligations, in order to prevent multiple redemptions. This would help to ensure that attackers cannot exploit the function for their own gain.",
      "tag_list": [],
      "title": "Multiple redemptions of position are possible",
      "user_note": {
        "created_at": null,
        "note": ""
      }
    },
    {
      "bookmarked": false,
      "bookmarked_total": 0,
      "change_logs": [],
      "content": "##### Description\nIn the `_getPrice` function, probably due to a mistype, the cycle is not exited after the determination of the final price. This may lead to several executions of the `price *= decimalDiff` code wich renders the price significantly higher than it should be.\n\nAs this issue may lead to an incorrect battle resolution, we assign the CRITICAL severity rating to it.\n\nRelated code - the `_getPrice` function: https://github.com/DivergenceProtocol/diver-contracts/blob/29a0ccb5fc7ac838bd44c75c0afc398b84be267a/src/core/Oracle.sol#L66\n##### Recommendation\nWe recommend fixing the algorithm of price calculation.\n\n\n",
      "contest_link": "",
      "contest_prize_txt": "",
      "editor_comments": [],
      "finder_list": [
        "MixBytes"
      ],
      "finders_count": 1,
      "general_score": 0,
      "github_dicussion_no": 23430,
      "github_link": "",
      "id": 29439,
      "impact": "HIGH",
      "issue_protocol": {
        "category_list": [],
        "id": 1233,
        "name": "Divergence Protocol"
      },
      "issue_source": {
        "has_contest": false,
        "logo_horizontal_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_horizontal.png",
        "logo_square_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_square.png",
        "name": "MixBytes",
        "url": "https://mixbytes.io/"
      },
      "kind": "MARKDOWN",
      "markasread": false,
      "openai_explained": true,
      "pdf_link": "",
      "pdf_page_from": 0,
      "quality_score": 0,
      "report_date": "2023-12-28T00:00:00Z",
      "similar_issue_list": [
        {
          "id": 29443,
          "slug": "price-manipulation-by-calling-updatephase-prematurely-mixbytes-none-divergence-protocol-markdown",
          "title": "Price manipulation by calling `updatePhase` prematurely"
        },
        {
          "id": 3514,
          "slug": "m-2-wrong-price-calculation-in-dngmxjuniorvaultmanagersol-sherlock-rage-trade-rage-trade-git",
          "title": "M-2: Wrong price calculation in DnGmxJuniorVaultManager.sol"
        },
        {
          "id": 28576,
          "slug": "potential-div-by-zero-error-mixbytes-none-bond-appetit-markdown",
          "title": "Potential div by zero error"
        }
      ],
      "slug": "incorrect-price-calculation-on-more-than-two-phases-mixbytes-none-divergence-protocol-markdown",
      "source_link": "https://github.com/mixbytes/audits_public/blob/master/Divergence%20Protocol/README.md#4-incorrect-price-calculation-on-more-than-two-phases",
      "sponsor_name": null,
      "summary": "\nThis bug report is about an issue in the `_getPrice` function of the Divergence Protocol's contracts. The problem is that due to a mistype, the cycle is not exited after the determination of the final price, leading to several executions of the `price *= decimalDiff` code, which renders the price significantly higher than it should be. As this issue may lead to an incorrect battle resolution, it has been assigned the CRITICAL severity rating. The related code can be found in the link provided. The recommendation is to fix the algorithm of price calculation.",
      "tag_list": [],
      "title": "Incorrect price calculation on more than two phases",
      "user_note": {
        "created_at": null,
        "note": ""
      }
    },
    {
      "bookmarked": false,
      "bookmarked_total": 0,
      "change_logs": [],
      "content": "##### Description\nThe starting price [`startSqrtPriceX96`](https://github.com/DivergenceProtocol/diver-contracts/blob/e5286f94a7ccb9d6279fae51ea66a8833672628a/src/core/Battle.sol#L102) is an arbitrary, user-defined value. For the given battle key, an attacker can specify their unfair price to grief other users or even to make profits from unfair trade conditions. Such attacks can't be avoided without redeploying the system's smart-contract.\n\n##### Recommendation\nWe recommend including `startSqrtPriceX96` into the battle identifier (battle key).\n",
      "contest_link": "",
      "contest_prize_txt": "",
      "editor_comments": [],
      "finder_list": [
        "MixBytes"
      ],
      "finders_count": 1,
      "general_score": 0,
      "github_dicussion_no": 23429,
      "github_link": "",
      "id": 29440,
      "impact": "HIGH",
      "issue_protocol": {
        "category_list": [],
        "id": 1233,
        "name": "Divergence Protocol"
      },
      "issue_source": {
        "has_contest": false,
        "logo_horizontal_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_horizontal.png",
        "logo_square_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_square.png",
        "name": "MixBytes",
        "url": "https://mixbytes.io/"
      },
      "kind": "MARKDOWN",
      "markasread": false,
      "openai_explained": true,
      "pdf_link": "",
      "pdf_page_from": 0,
      "quality_score": 0,
      "report_date": "2023-12-28T00:00:00Z",
      "similar_issue_list": [
        {
          "id": 29437,
          "slug": "battle-fishing-attack-mixbytes-none-divergence-protocol-markdown",
          "title": "Battle fishing attack"
        },
        {
          "id": 29439,
          "slug": "incorrect-price-calculation-on-more-than-two-phases-mixbytes-none-divergence-protocol-markdown",
          "title": "Incorrect price calculation on more than two phases"
        },
        {
          "id": 3400,
          "slug": "h-1-attacker-can-manipulate-the-pricepershare-to-profit-from-future-users-deposits-sherlock-mycelium-mycelium-git",
          "title": "H-1: Attacker can manipulate the pricePerShare to profit from future users' deposits"
        }
      ],
      "slug": "the-startsqrtpricex96-manipulation-mixbytes-none-divergence-protocol-markdown",
      "source_link": "https://github.com/mixbytes/audits_public/blob/master/Divergence%20Protocol/README.md#1-the-startsqrtpricex96-manipulation",
      "sponsor_name": null,
      "summary": "\nA bug has been reported in the Divergence Protocol's smart-contract system, which allows attackers to specify an unfair starting price for a battle key. This could be used to grief other users or to make profits from unfair trade conditions, and cannot be avoided without redeploying the system's smart-contract. To fix this, the report recommends including the starting price into the battle identifier.",
      "tag_list": [],
      "title": "The `startSqrtPriceX96` manipulation",
      "user_note": {
        "created_at": null,
        "note": ""
      }
    },
    {
      "bookmarked": false,
      "bookmarked_total": 0,
      "change_logs": [],
      "content": "##### Description\nThe trade function allows you to specify a price limit, upon reaching which the cycle will be exited without performing any movement of tokens at line\nhttps://github.com/DivergenceProtocol/diver-contracts/blob/29a0ccb5fc7ac838bd44c75c0afc398b84be267a/src/core/Battle.sol#L286, \nbut with a change of the current price at line \nhttps://github.com/DivergenceProtocol/diver-contracts/blob/29a0ccb5fc7ac838bd44c75c0afc398b84be267a/src/core/Battle.sol#L359.\n \nAn attacker creates a contract that calls the trade function of the Battle contract with a price limit. To get passed the balance check, the attacker sends one token to the contract inside tradeCallback.\n\nThis ability to perform empty exchanges in empty areas of liquidity creates the possibility of price manipulation. This capability can be used by an attacker to attack liquidity providers in order to block the addition of liquidity. \n\nhttps://github.com/DivergenceProtocol/diver-contracts/blob/29a0ccb5fc7ac838bd44c75c0afc398b84be267a/src/periphery/base/LiquidityManagement.sol#L43\n\nTo resolve this, it is necessary to resort to non-standard actions, for example, adding liquidity over the entire tick interval.\n\nThis error is marked as HIGH as the contract is blocked by the attacker.\n\n##### Recommendation\nWe recommend following one of the next ways:\n\n1) Revert empty trades\n2) Add function initAddLIquidity that moves price to the right place and then call the addLiquidity function\n\n\n",
      "contest_link": "",
      "contest_prize_txt": "",
      "editor_comments": [],
      "finder_list": [
        "MixBytes"
      ],
      "finders_count": 1,
      "general_score": 0,
      "github_dicussion_no": 23428,
      "github_link": "",
      "id": 29441,
      "impact": "HIGH",
      "issue_protocol": {
        "category_list": [],
        "id": 1233,
        "name": "Divergence Protocol"
      },
      "issue_source": {
        "has_contest": false,
        "logo_horizontal_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_horizontal.png",
        "logo_square_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_square.png",
        "name": "MixBytes",
        "url": "https://mixbytes.io/"
      },
      "kind": "MARKDOWN",
      "markasread": false,
      "openai_explained": true,
      "pdf_link": "",
      "pdf_page_from": 0,
      "quality_score": 0,
      "report_date": "2023-12-28T00:00:00Z",
      "similar_issue_list": [
        {
          "id": 19026,
          "slug": "trst-h-1-a-malicious-operator-can-drain-the-vault-funds-in-one-transaction-trust-security-none-orbital-finance-markdown_",
          "title": "TRST-H-1 A malicious operator can drain the vault funds in one transaction"
        },
        {
          "id": 28165,
          "slug": "unnecessary-and-unrestricted-trade-at-syncbancorswapper-mixbytes-none-yearn-finance-markdown",
          "title": "Unnecessary and unrestricted `trade()` at `sync/BancorSwapper`"
        },
        {
          "id": 28292,
          "slug": "token-exchange-blocking-mixbytes-none-1inch-markdown",
          "title": "Token exchange blocking"
        }
      ],
      "slug": "empty-trades-mixbytes-none-divergence-protocol-markdown",
      "source_link": "https://github.com/mixbytes/audits_public/blob/master/Divergence%20Protocol/README.md#2-empty-trades",
      "sponsor_name": null,
      "summary": "\nThis bug report describes an issue with the trade function of the Battle contract. The trade function allows users to specify a price limit, and when this limit is reached, the cycle will be exited without any movement of tokens. However, an attacker can create a contract that calls this function with a price limit, and then send one token to the contract inside tradeCallback in order to get passed the balance check. This can be used to manipulate prices and attack liquidity providers, blocking the addition of liquidity.\n\nTo resolve this issue, two recommendations have been made. The first is to revert empty trades, and the second is to add a function called initAddLiquidity that moves the price to the right place and then calls the addLiquidity function. This error is marked as high as the contract is blocked by the attacker.",
      "tag_list": [],
      "title": "Empty trades",
      "user_note": {
        "created_at": null,
        "note": ""
      }
    },
    {
      "bookmarked": false,
      "bookmarked_total": 0,
      "change_logs": [],
      "content": "##### Description\nIn the audited commit `29a0ccb5fc7ac838bd44c75c0afc398b84be267a`, the `endRoundId` value is not dependent on the asset symbol. By calling the `updatePhase` function with a different `symbol` argument, an attacker may manipulate the `endRoundId` values. This could violate the correctness of the price calculation algorithm, leading to incorrect battle income.\n\nAlthough this is a critical flaw, it is only exploitable during a 1-hour period after a Chainlink phase has been changed. Given its critical impact but low likelihood, this issue is assigned a HIGH severity rating.\n\nRelated code - the declaration of the `endRoundId`: https://github.com/DivergenceProtocol/diver-contracts/blob/29a0ccb5fc7ac838bd44c75c0afc398b84be267a/src/core/Oracle.sol#L17\n\n##### Recommendation\nWe recommend reworking the entire algorithm of interaction with Chainlink to render it more tolerant to manipulations.\n\n\n",
      "contest_link": "",
      "contest_prize_txt": "",
      "editor_comments": [],
      "finder_list": [
        "MixBytes"
      ],
      "finders_count": 1,
      "general_score": 0,
      "github_dicussion_no": 23427,
      "github_link": "",
      "id": 29442,
      "impact": "HIGH",
      "issue_protocol": {
        "category_list": [],
        "id": 1233,
        "name": "Divergence Protocol"
      },
      "issue_source": {
        "has_contest": false,
        "logo_horizontal_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_horizontal.png",
        "logo_square_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_square.png",
        "name": "MixBytes",
        "url": "https://mixbytes.io/"
      },
      "kind": "MARKDOWN",
      "markasread": false,
      "openai_explained": true,
      "pdf_link": "",
      "pdf_page_from": 0,
      "quality_score": 0,
      "report_date": "2023-12-28T00:00:00Z",
      "similar_issue_list": [
        {
          "id": 29443,
          "slug": "price-manipulation-by-calling-updatephase-prematurely-mixbytes-none-divergence-protocol-markdown",
          "title": "Price manipulation by calling `updatePhase` prematurely"
        },
        {
          "id": 21614,
          "slug": "data-returned-from-chainlink-is-not-validated-halborn-none-damfinance-lmcv-part-2-pdf",
          "title": "DATA RETURNED FROM CHAINLINK IS NOT VALIDATED"
        },
        {
          "id": 3228,
          "slug": "m-24-naz-m1-chainlinks-latestrounddata-might-return-stale-results-code4rena-olympus-dao-olympus-dao-contest-git",
          "title": "[M-24] [NAZ-M1] Chainlink's `latestRoundData` Might Return Stale Results"
        }
      ],
      "slug": "price-manipulation-by-calling-updatephase-with-different-symbols-mixbytes-none-divergence-protocol-markdown",
      "source_link": "https://github.com/mixbytes/audits_public/blob/master/Divergence%20Protocol/README.md#3-price-manipulation-by-calling-updatephase-with-different-symbols",
      "sponsor_name": null,
      "summary": "\nThis bug report details a critical flaw in the audited commit `29a0ccb5fc7ac838bd44c75c0afc398b84be267a` in which the `endRoundId` value is not dependent on the asset symbol. An attacker could exploit this vulnerability to manipulate the `endRoundId` values, which would lead to incorrect battle income and violate the correctness of the price calculation algorithm. \n\nThe issue is considered to be of HIGH severity due to its critical impact, but it is only exploitable during a 1-hour period after a Chainlink phase has been changed. As a result, the recommendation is to rework the entire algorithm of interaction with Chainlink to make it more tolerant to manipulations.",
      "tag_list": [],
      "title": "Price manipulation by calling `updatePhase` with different symbols",
      "user_note": {
        "created_at": null,
        "note": ""
      }
    },
    {
      "bookmarked": false,
      "bookmarked_total": 0,
      "change_logs": [],
      "content": "##### Description\nWhen `updatePhase` is called before the current phase has ended, it records an incorrect `endRoundId` value. Additionally, if `updatePhase` is not called after the phase has ended, the price calculation will be compromised in a manner similar to issue High.3.\n\nThis issue is even less exploitable than the previous one, but the impact is still critical, hence we assign it a HIGH severity rating.\n\nRelated code - the `updatePhase` function: https://github.com/DivergenceProtocol/diver-contracts/blob/29a0ccb5fc7ac838bd44c75c0afc398b84be267a/src/core/Oracle.sol#L113\n##### Recommendation\nWe recommend reworking the entire algorithm of interaction with Chainlink to render it more tolerant to manipulations.\n\n\n",
      "contest_link": "",
      "contest_prize_txt": "",
      "editor_comments": [],
      "finder_list": [
        "MixBytes"
      ],
      "finders_count": 1,
      "general_score": 0,
      "github_dicussion_no": 23426,
      "github_link": "",
      "id": 29443,
      "impact": "HIGH",
      "issue_protocol": {
        "category_list": [],
        "id": 1233,
        "name": "Divergence Protocol"
      },
      "issue_source": {
        "has_contest": false,
        "logo_horizontal_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_horizontal.png",
        "logo_square_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_square.png",
        "name": "MixBytes",
        "url": "https://mixbytes.io/"
      },
      "kind": "MARKDOWN",
      "markasread": false,
      "openai_explained": true,
      "pdf_link": "",
      "pdf_page_from": 0,
      "quality_score": 0,
      "report_date": "2023-12-28T00:00:00Z",
      "similar_issue_list": [
        {
          "id": 29439,
          "slug": "incorrect-price-calculation-on-more-than-two-phases-mixbytes-none-divergence-protocol-markdown",
          "title": "Incorrect price calculation on more than two phases"
        },
        {
          "id": 29442,
          "slug": "price-manipulation-by-calling-updatephase-with-different-symbols-mixbytes-none-divergence-protocol-markdown",
          "title": "Price manipulation by calling `updatePhase` with different symbols"
        },
        {
          "id": 3228,
          "slug": "m-24-naz-m1-chainlinks-latestrounddata-might-return-stale-results-code4rena-olympus-dao-olympus-dao-contest-git",
          "title": "[M-24] [NAZ-M1] Chainlink's `latestRoundData` Might Return Stale Results"
        }
      ],
      "slug": "price-manipulation-by-calling-updatephase-prematurely-mixbytes-none-divergence-protocol-markdown",
      "source_link": "https://github.com/mixbytes/audits_public/blob/master/Divergence%20Protocol/README.md#4-price-manipulation-by-calling-updatephase-prematurely",
      "sponsor_name": null,
      "summary": "\nA bug has been identified in the `updatePhase` function of the Divergence Protocol, which is used to calculate prices. When `updatePhase` is called before the current phase has ended, an incorrect `endRoundId` value is recorded, and if `updatePhase` is not called after the phase has ended, the price calculation will be compromised. This issue is considered to be of high severity, and is less exploitable than other similar issues. \n\nTo fix this bug, it is recommended to rework the entire algorithm of interaction with Chainlink, making it more tolerant to manipulations.",
      "tag_list": [],
      "title": "Price manipulation by calling `updatePhase` prematurely",
      "user_note": {
        "created_at": null,
        "note": ""
      }
    },
    {
      "bookmarked": false,
      "bookmarked_total": 0,
      "change_logs": [],
      "content": "##### Description\nThe `Oracle` contract has a function [`setExternalOracle`](https://github.com/DivergenceProtocol/diver-contracts/blob/e5286f94a7ccb9d6279fae51ea66a8833672628a/src/core/Oracle.sol#L24) that set an external oracle address for symbols. The owner is able to set a fake external oracle just before the battle end. As a result, it will lead to the incorrect battle settlement.\n\n##### Recommendation\nWe recommend locking the possibility to change the oracle address for an already created battle.\n",
      "contest_link": "",
      "contest_prize_txt": "",
      "editor_comments": [],
      "finder_list": [
        "MixBytes"
      ],
      "finders_count": 1,
      "general_score": 0,
      "github_dicussion_no": 23425,
      "github_link": "",
      "id": 29444,
      "impact": "MEDIUM",
      "issue_protocol": {
        "category_list": [],
        "id": 1233,
        "name": "Divergence Protocol"
      },
      "issue_source": {
        "has_contest": false,
        "logo_horizontal_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_horizontal.png",
        "logo_square_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_square.png",
        "name": "MixBytes",
        "url": "https://mixbytes.io/"
      },
      "kind": "MARKDOWN",
      "markasread": false,
      "openai_explained": true,
      "pdf_link": "",
      "pdf_page_from": 0,
      "quality_score": 0,
      "report_date": "2023-12-28T00:00:00Z",
      "similar_issue_list": [
        {
          "id": 29436,
          "slug": "debug-code-in-getpricebyexternal-mixbytes-none-divergence-protocol-markdown",
          "title": "Debug code in `getPriceByExternal`"
        },
        {
          "id": 29445,
          "slug": "reserve-oracle-mixbytes-none-divergence-protocol-markdown",
          "title": "Reserve oracle"
        },
        {
          "id": 27597,
          "slug": "setter-functions-for-core-gmx-contracts-codehawks-steadefi-git",
          "title": "Setter functions for core GMX contracts"
        }
      ],
      "slug": "the-owner-can-manipulate-oracles-mixbytes-none-divergence-protocol-markdown",
      "source_link": "https://github.com/mixbytes/audits_public/blob/master/Divergence%20Protocol/README.md#1-the-owner-can-manipulate-oracles",
      "sponsor_name": null,
      "summary": "\nThis bug report is about the `Oracle` contract, which has a function [`setExternalOracle`](https://github.com/DivergenceProtocol/diver-contracts/blob/e5286f94a7ccb9d6279fae51ea66a8833672628a/src/core/Oracle.sol#L24) that sets an external oracle address for symbols. The issue is that the owner of the contract can set a fake external oracle just before the battle ends, which would lead to incorrect battle settlement. To prevent this, the recommendation is to lock the possibility to change the oracle address for an already created battle.",
      "tag_list": [],
      "title": "The owner can manipulate oracles",
      "user_note": {
        "created_at": null,
        "note": ""
      }
    },
    {
      "bookmarked": false,
      "bookmarked_total": 0,
      "change_logs": [],
      "content": "##### Description\nIn case of some instability with Chainlink oracle gaps in a price history are probably present. These gaps cause the `settle` function call to revert.\n##### Recommendation\nWe recommend adding some reserve price source for the `Oracle` contract.\n",
      "contest_link": "",
      "contest_prize_txt": "",
      "editor_comments": [],
      "finder_list": [
        "MixBytes"
      ],
      "finders_count": 1,
      "general_score": 0,
      "github_dicussion_no": 23424,
      "github_link": "",
      "id": 29445,
      "impact": "MEDIUM",
      "issue_protocol": {
        "category_list": [],
        "id": 1233,
        "name": "Divergence Protocol"
      },
      "issue_source": {
        "has_contest": false,
        "logo_horizontal_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_horizontal.png",
        "logo_square_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_square.png",
        "name": "MixBytes",
        "url": "https://mixbytes.io/"
      },
      "kind": "MARKDOWN",
      "markasread": false,
      "openai_explained": true,
      "pdf_link": "",
      "pdf_page_from": 0,
      "quality_score": 0,
      "report_date": "2023-12-28T00:00:00Z",
      "similar_issue_list": [
        {
          "id": 1192,
          "slug": "h-09-priceoracle-does-not-filter-price-feed-outliers-code4rena-sublime-sublime-contest-git",
          "title": "[H-09] `PriceOracle` Does Not Filter Price Feed Outliers"
        },
        {
          "id": 939,
          "slug": "m-05-chainlinks-latestrounddata-might-return-stale-or-incorrect-results-code4rena-mochi-mochi-contest-git",
          "title": "[M-05] Chainlink’s latestRoundData might return stale or incorrect results"
        },
        {
          "id": 13534,
          "slug": "stale-oracle-prices-might-affect-the-rates-consensys-definer-markdown",
          "title": "Stale Oracle prices might affect the rates"
        }
      ],
      "slug": "reserve-oracle-mixbytes-none-divergence-protocol-markdown",
      "source_link": "https://github.com/mixbytes/audits_public/blob/master/Divergence%20Protocol/README.md#2-reserve-oracle",
      "sponsor_name": null,
      "summary": "\nA bug report has been filed concerning Chainlink oracle and its instability. It is believed that gaps in the price history are causing the `settle` function call to revert. A recommendation has been made to add a reserve price source for the `Oracle` contract to address this issue. This will help to ensure that the `settle` function call does not revert due to price history gaps.",
      "tag_list": [],
      "title": "Reserve oracle",
      "user_note": {
        "created_at": null,
        "note": ""
      }
    },
    {
      "bookmarked": false,
      "bookmarked_total": 0,
      "change_logs": [],
      "content": "##### Description\nThe [`sweepToken`](https://github.com/DivergenceProtocol/diver-contracts/blob/e5286f94a7ccb9d6279fae51ea66a8833672628a/src/periphery/base/PeripheryPayments.sol#L31) and [`refundETH`](https://github.com/DivergenceProtocol/diver-contracts/blob/e5286f94a7ccb9d6279fae51ea66a8833672628a/src/periphery/base/PeripheryPayments.sol#L42) functions allow anyone to withdraw funds from the `Manager` contract. There are no funds on the contract by design but if someone makes a wrong transfer to the contract by mistake, an attacker can steal it. Also, there is a risk of inheritance of this contract in the future in other cases where funds will be kept on a new contract. \n\n##### Recommendation\nWe recommend adding access control to the withdraw functions.\n",
      "contest_link": "",
      "contest_prize_txt": "",
      "editor_comments": [],
      "finder_list": [
        "MixBytes"
      ],
      "finders_count": 1,
      "general_score": 0,
      "github_dicussion_no": 23423,
      "github_link": "",
      "id": 29446,
      "impact": "MEDIUM",
      "issue_protocol": {
        "category_list": [],
        "id": 1233,
        "name": "Divergence Protocol"
      },
      "issue_source": {
        "has_contest": false,
        "logo_horizontal_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_horizontal.png",
        "logo_square_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_square.png",
        "name": "MixBytes",
        "url": "https://mixbytes.io/"
      },
      "kind": "MARKDOWN",
      "markasread": false,
      "openai_explained": true,
      "pdf_link": "",
      "pdf_page_from": 0,
      "quality_score": 0,
      "report_date": "2023-12-28T00:00:00Z",
      "similar_issue_list": [
        {
          "id": 28770,
          "slug": "m-10-contracts-are-vulnerable-to-fee-on-transfer-accounting-related-issues-code4rena-axelar-network-axelar-network-git",
          "title": "[M-10] Contracts are vulnerable to fee-on-transfer accounting-related issues"
        },
        {
          "id": 1101,
          "slug": "m-06-abstractrewardmine-re-entrancy-attack-during-withdrawal-code4rena-malt-finance-malt-finance-contest-git",
          "title": "[M-06] AbstractRewardMine - Re-entrancy attack during withdrawal"
        },
        {
          "id": 17397,
          "slug": "malicious-manager-can-reinvest-tokens-to-drain-the-pool-trailofbits-balancer-v2-pdf",
          "title": "Malicious manager can reinvest tokens to drain the pool"
        }
      ],
      "slug": "public-functions-for-withdrawn-assets-in-the-peripherypayments-contract-mixbytes-none-divergence-protocol-markdown",
      "source_link": "https://github.com/mixbytes/audits_public/blob/master/Divergence%20Protocol/README.md#3-public-functions-for-withdrawn-assets-in-the-peripherypayments-contract",
      "sponsor_name": null,
      "summary": "\nThis bug report concerns the [`sweepToken`](https://github.com/DivergenceProtocol/diver-contracts/blob/e5286f94a7ccb9d6279fae51ea66a8833672628a/src/periphery/base/PeripheryPayments.sol#L31) and [`refundETH`](https://github.com/DivergenceProtocol/diver-contracts/blob/e5286f94a7ccb9d6279fae51ea66a8833672628a/src/periphery/base/PeripheryPayments.sol#L42) functions of the `Manager` contract. These functions allow anyone to withdraw funds from the contract, even if there are no funds on it. This means that if someone makes a wrong transfer to the contract, an attacker can steal it. Furthermore, there is a risk of inheritance of this contract in the future when funds are kept on a new contract. \n\nTo address this issue, the bug report recommends adding access control to the withdraw functions. This will ensure that only authorized users can access the funds.",
      "tag_list": [],
      "title": "Public functions for withdrawn assets in the `PeripheryPayments` contract",
      "user_note": {
        "created_at": null,
        "note": ""
      }
    },
    {
      "bookmarked": false,
      "bookmarked_total": 0,
      "change_logs": [],
      "content": "##### Description\nThere is no specific incentivization of the [`settle()`](https://github.com/DivergenceProtocol/diver-contracts/blob/e5286f94a7ccb9d6279fae51ea66a8833672628a/src/core/Battle.sol#L424) function. Though most of the users are interested in battle finalization, but in order to save gas each user would prefer to avoid making the settlement by themselves. It may make sense for some networks where gas is expensive enough. Consecutively, it is expected behavior that users wouldn't make battle settlements, and the project owner will make it in a centralized manner even if it is unprofitable for them. It causes some centralization and an open attack vector for the griefing attack by spamming the project by battles that the project owner is enforced to finalize even if it is unprofitable for them.\n##### Recommendation\nWe recommend introducing some incentivization of the battle settlement. It can be combined with spam protection.",
      "contest_link": "",
      "contest_prize_txt": "",
      "editor_comments": [],
      "finder_list": [
        "MixBytes"
      ],
      "finders_count": 1,
      "general_score": 0,
      "github_dicussion_no": 23422,
      "github_link": "",
      "id": 29447,
      "impact": "MEDIUM",
      "issue_protocol": {
        "category_list": [],
        "id": 1233,
        "name": "Divergence Protocol"
      },
      "issue_source": {
        "has_contest": false,
        "logo_horizontal_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_horizontal.png",
        "logo_square_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_square.png",
        "name": "MixBytes",
        "url": "https://mixbytes.io/"
      },
      "kind": "MARKDOWN",
      "markasread": false,
      "openai_explained": true,
      "pdf_link": "",
      "pdf_page_from": 0,
      "quality_score": 0,
      "report_date": "2023-12-28T00:00:00Z",
      "similar_issue_list": [
        {
          "id": 29440,
          "slug": "the-startsqrtpricex96-manipulation-mixbytes-none-divergence-protocol-markdown",
          "title": "The `startSqrtPriceX96` manipulation"
        },
        {
          "id": 1521,
          "slug": "m-04-settlefunding-will-exceed-block-gas-with-more-markets-and-activity-code4rena-hubble-hubble-contest-git",
          "title": "[M-04] settleFunding will exceed block gas with more markets and activity"
        },
        {
          "id": 19817,
          "slug": "h-01-re-entrancy-in-settleauction-allow-stealing-all-funds-code4rena-kuiper-kuiper-contest-git_",
          "title": "[H-01] Re-entrancy in `settleAuction` allow stealing all funds"
        }
      ],
      "slug": "lack-of-incentivization-of-the-battle-settlement-process-mixbytes-none-divergence-protocol-markdown",
      "source_link": "https://github.com/mixbytes/audits_public/blob/master/Divergence%20Protocol/README.md#4-lack-of-incentivization-of-the-battle-settlement-process",
      "sponsor_name": null,
      "summary": "\nThis bug report is about the lack of incentivization of the `settle()` function in the Divergence Protocol. Without incentivization, users may prefer to save gas by avoiding making the settlement themselves, leading to centralized battle settlement and an open attack vector for griefing attacks. To solve this issue, it is recommended that incentivization of battle settlement be introduced, combined with spam protection.",
      "tag_list": [],
      "title": "Lack of incentivization of the battle settlement process",
      "user_note": {
        "created_at": null,
        "note": ""
      }
    },
    {
      "bookmarked": false,
      "bookmarked_total": 0,
      "change_logs": [],
      "content": "##### Description\n`redeemObligation` is designed to be called when the state is `Outcome.ONGOING`. However, it utilizes [`Battle.withdrawObligation`](https://github.com/DivergenceProtocol/diver-contracts/blob/b094ef8a453f4e0c688f36f8ef7743e7f40a36cb/src/periphery/Manager.sol#L204) which will invariably be reverted under such conditions.\n##### Recommendation\nIt is recommended to either modify `Battle.withdrawObligation` or use an alternative function instead in order to enable the withdrawal of obligations during the `Outcome.ONGOING` state.\n\n\n",
      "contest_link": "",
      "contest_prize_txt": "",
      "editor_comments": [],
      "finder_list": [
        "MixBytes"
      ],
      "finders_count": 1,
      "general_score": 0,
      "github_dicussion_no": 23421,
      "github_link": "",
      "id": 29448,
      "impact": "MEDIUM",
      "issue_protocol": {
        "category_list": [],
        "id": 1233,
        "name": "Divergence Protocol"
      },
      "issue_source": {
        "has_contest": false,
        "logo_horizontal_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_horizontal.png",
        "logo_square_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_square.png",
        "name": "MixBytes",
        "url": "https://mixbytes.io/"
      },
      "kind": "MARKDOWN",
      "markasread": false,
      "openai_explained": true,
      "pdf_link": "",
      "pdf_page_from": 0,
      "quality_score": 0,
      "report_date": "2023-12-28T00:00:00Z",
      "similar_issue_list": [
        {
          "id": 29438,
          "slug": "multiple-redemptions-of-position-are-possible-mixbytes-none-divergence-protocol-markdown",
          "title": "Multiple redemptions of position are possible"
        },
        {
          "id": 6676,
          "slug": "h-4-user-can-receive-more-rewards-through-a-mistake-in-the-withdrawal-logic-sherlock-olympusdao-olympusdao-git",
          "title": "H-4: User can receive more rewards through a mistake in the withdrawal logic"
        },
        {
          "id": 24773,
          "slug": "m-10-rewards-arent-updated-before-users-balance-change-in-gauges-withdrawtoken-code4rena-velodrome-finance-velodrome-finance-git",
          "title": "[M-10] Rewards aren't updated before user's balance change in Gauge's `withdrawToken`"
        }
      ],
      "slug": "the-redeemobligation-will-always-be-reverted-mixbytes-none-divergence-protocol-markdown",
      "source_link": "https://github.com/mixbytes/audits_public/blob/master/Divergence%20Protocol/README.md#5-the-redeemobligation-will-always-be-reverted",
      "sponsor_name": null,
      "summary": "\nThe bug report describes an issue with the `redeemObligation` function in the Divergence Protocol. This function is designed to be called when the state is `Outcome.ONGOING`, however, it utilizes `Battle.withdrawObligation`, which will be reverted under such conditions. To fix this issue, it is recommended to modify `Battle.withdrawObligation` or use an alternative function instead to enable the withdrawal of obligations during the `Outcome.ONGOING` state.",
      "tag_list": [],
      "title": "The `redeemObligation` will always be reverted",
      "user_note": {
        "created_at": null,
        "note": ""
      }
    },
    {
      "bookmarked": false,
      "bookmarked_total": 2,
      "change_logs": [],
      "content": "Severity: Critical Risk\nContext: linux-ec2-cdk/lib/linux-ec2-cdk-stack.ts#L49-L83\nDescription: The following ports will be open from the internet ( 0.0.0.0/0 ) and would allow anyone to access\nany service running under them.\n• 443 tcp - https\n• 9100-9104 tcp - beacon Node metrics port\n• 9091 tcp - prometheus\n• 3100 tcp - grafana\n• 8545 tcp - execution layer rpc\n• 9001 tcp - prometheus\n• 5052 - beacon API\nRecommendation: Remove the ports from the security group and keep public facing ports to the minimum (the\nAPI ports currently exposed can be easily used to DDoS the node and should definitely not be exposed). In this\ncase, the P2P ports 9001(tcp/udp) and 30303(tcp/udp). Port forwarding via SSH can be used to access these\nports in a secure way.\nRedacted: Fixed in PR 56.\nSpearbit: The recommendation was followed and a fix was applied in PR 56 at commit 6b5f37a6. Only the P2P\nports are now directly exposed directly to the Internet.\n",
      "contest_link": "https://github.com/spearbit/portfolio/blob/master/pdfs/Redacted-Dinero-Infrastructure-Security-Review.pdf",
      "contest_prize_txt": "",
      "editor_comments": [],
      "finder_list": [
        "Parithosh",
        "Rafael Matias"
      ],
      "finders_count": 2,
      "general_score": 0,
      "github_dicussion_no": 23324,
      "github_link": "",
      "id": 29407,
      "impact": "HIGH",
      "issue_protocol": {
        "category_list": [],
        "id": 1231,
        "name": "Redacted Dinero Infrastructure"
      },
      "issue_source": {
        "has_contest": false,
        "logo_horizontal_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/spearbit_horizontal.png",
        "logo_square_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/spearbit_square.png",
        "name": "Spearbit",
        "url": "https://spearbit.com"
      },
      "kind": "PDF",
      "markasread": false,
      "openai_explained": true,
      "pdf_link": "https://solodit-bucket.s3.amazonaws.com/storage/reports/spearbit/Redacted-Dinero-Infrastructure-Security-Review.pdf",
      "pdf_page_from": 6,
      "quality_score": 0,
      "report_date": "2023-12-19T00:00:00Z",
      "similar_issue_list": [
        {
          "id": 29408,
          "slug": "docker-container-running-as-root-spearbit-none-redacted-dinero-infrastructure-pdf",
          "title": "Docker container running as root"
        },
        {
          "id": 21470,
          "slug": "private-ssh-keys-committed-to-git-repository-halborn-none-boostylabs-tricorn-bridge-server-golang-security-assessment-pdf",
          "title": "PRIVATE SSH KEYS COMMITTED TO GIT REPOSITORY"
        },
        {
          "id": 13326,
          "slug": "router-spawns-unauthenticated-admin-api-endpoint-listening-on-all-interfaces-consensys-connext-nxtp-noncustodial-xchain-transfer-protocol-markdown",
          "title": "Router - spawns unauthenticated admin API endpoint listening on all interfaces"
        }
      ],
      "slug": "open-ports-to-the-internet-spearbit-none-redacted-dinero-infrastructure-pdf",
      "source_link": "https://github.com/spearbit/portfolio/blob/master/pdfs/Redacted-Dinero-Infrastructure-Security-Review.pdf",
      "sponsor_name": null,
      "summary": "\nThis bug report discusses a critical risk with the Linux-EC2-CDK stack. It was discovered that several ports were open from the internet, allowing anyone to access any service running under them. These ports included 443 tcp (https), 9100-9104 tcp (beacon Node metrics port), 9091 tcp (prometheus), 3100 tcp (grafana), 8545 tcp (execution layer rpc), 9001 tcp (prometheus), and 5052 (beacon API). The recommendation was to remove the ports from the security group and keep public facing ports to a minimum. It was suggested to only have the P2P ports 9001 (tcp/udp) and 30303 (tcp/udp) exposed directly to the Internet, with port forwarding via SSH being used to access them securely. The recommendation was followed and a fix was applied in PR 56 at commit 6b5f37a6, so now only the P2P ports are directly exposed to the Internet.",
      "tag_list": [],
      "title": "Open ports to the internet",
      "user_note": {
        "created_at": null,
        "note": ""
      }
    },
    {
      "bookmarked": false,
      "bookmarked_total": 1,
      "change_logs": [],
      "content": "Severity: Medium Risk\nContext: dineronode/docker/pirexeth-dockerfile#L1, dineronode/docker/pirexeth-ec-migrator#L1,\ndineronode/docker/pirexeth-prune-provision#L1\nDescription: Docker containers run by default as root . It is recommended to use a different user to prevent\nprivilege escalation.\nRecommendation: Add a USER to the Dockerfile. This will require that the files needed to run the node software\nare owned by that user.\nRedacted: Fixed in PR 56.\nSpearbit: The recommendation was followed and a fix was applied in PR 56 at commit 6a5de538.\n5\n",
      "contest_link": "https://github.com/spearbit/portfolio/blob/master/pdfs/Redacted-Dinero-Infrastructure-Security-Review.pdf",
      "contest_prize_txt": "",
      "editor_comments": [],
      "finder_list": [
        "Parithosh",
        "Rafael Matias"
      ],
      "finders_count": 2,
      "general_score": 0,
      "github_dicussion_no": 23323,
      "github_link": "",
      "id": 29408,
      "impact": "MEDIUM",
      "issue_protocol": {
        "category_list": [],
        "id": 1231,
        "name": "Redacted Dinero Infrastructure"
      },
      "issue_source": {
        "has_contest": false,
        "logo_horizontal_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/spearbit_horizontal.png",
        "logo_square_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/spearbit_square.png",
        "name": "Spearbit",
        "url": "https://spearbit.com"
      },
      "kind": "PDF",
      "markasread": false,
      "openai_explained": true,
      "pdf_link": "https://solodit-bucket.s3.amazonaws.com/storage/reports/spearbit/Redacted-Dinero-Infrastructure-Security-Review.pdf",
      "pdf_page_from": 6,
      "quality_score": 0,
      "report_date": "2023-12-19T00:00:00Z",
      "similar_issue_list": [
        {
          "id": 19364,
          "slug": "use-of-weak-entropy-source-for-secret-tokens-sigmaprime-none-eth-docker-pdf",
          "title": "Use of Weak Entropy Source for Secret Tokens"
        },
        {
          "id": 16922,
          "slug": "peggo-takes-an-ethereum-private-key-as-a-command-line-argument-trailofbits-umee-pdf",
          "title": "Peggo takes an Ethereum private key as a command-line argument"
        },
        {
          "id": 13447,
          "slug": "deployment-docker-containers-running-as-root-consensys-rocketpool-markdown",
          "title": "Deployment - Docker containers running as root"
        }
      ],
      "slug": "docker-container-running-as-root-spearbit-none-redacted-dinero-infrastructure-pdf",
      "source_link": "https://github.com/spearbit/portfolio/blob/master/pdfs/Redacted-Dinero-Infrastructure-Security-Review.pdf",
      "sponsor_name": null,
      "summary": "\nThis bug report is about Docker containers running by default as root, which can lead to privilege escalation. It is recommended to use a different user to prevent this from happening. A fix was applied in Pull Request (PR) 56, which added a USER to the Dockerfile. This made sure that the files needed to run the node software were owned by that user. This bug report was related to dineronode/docker/pirexeth-dockerfile#L1, dineronode/docker/pirexeth-ec-migrator#L1, and dineronode/docker/pirexeth-prune-provision#L1. The severity of this bug was Medium Risk.",
      "tag_list": [],
      "title": "Docker container running as root",
      "user_note": {
        "created_at": null,
        "note": ""
      }
    },
    {
      "bookmarked": false,
      "bookmarked_total": 0,
      "change_logs": [],
      "content": "Severity: Medium Risk\nContext: cdk-dinero-keeper/src/functions/update-validator-stats/index.ts#L226\nDescription: The Ethereum chain finalizes roughly every 2 epochs (64 slots), at this point the network offers\nextreme guarantees for the finalized blocks. The current value of CONFIRMATION_BLOCKS=30 would be historically\nsafe, but offers no guarantees in edge/attack cases against reorgs and non-finality incidents.\nRecommendation: There is a notion of finalized blocks that could be used instead. The data would be older, but\nwould represent the finalized state of the network. Note that in case of a non-finality incident on the network, the\nvalue will be stuck in the past unless the network is healthy again. This may even be an advantage as you will not\nperform actions on data that might change or spend funds that should not have been.\nRedacted: Fixed in PR 56.\nSpearbit: The recommendation was followed and a fix was applied in PR 56 at commit 3772bdd8.\n",
      "contest_link": "https://github.com/spearbit/portfolio/blob/master/pdfs/Redacted-Dinero-Infrastructure-Security-Review.pdf",
      "contest_prize_txt": "",
      "editor_comments": [],
      "finder_list": [
        "Parithosh",
        "Rafael Matias"
      ],
      "finders_count": 2,
      "general_score": 0,
      "github_dicussion_no": 23322,
      "github_link": "",
      "id": 29409,
      "impact": "MEDIUM",
      "issue_protocol": {
        "category_list": [],
        "id": 1231,
        "name": "Redacted Dinero Infrastructure"
      },
      "issue_source": {
        "has_contest": false,
        "logo_horizontal_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/spearbit_horizontal.png",
        "logo_square_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/spearbit_square.png",
        "name": "Spearbit",
        "url": "https://spearbit.com"
      },
      "kind": "PDF",
      "markasread": false,
      "openai_explained": true,
      "pdf_link": "https://solodit-bucket.s3.amazonaws.com/storage/reports/spearbit/Redacted-Dinero-Infrastructure-Security-Review.pdf",
      "pdf_page_from": 7,
      "quality_score": 0,
      "report_date": "2023-12-19T00:00:00Z",
      "similar_issue_list": [
        {
          "id": 27676,
          "slug": "it-is-possible-that-some-unstake-requests-can-get-uncancellable-mixbytes-none-mantle-network-markdown",
          "title": "It is possible that some unstake requests can get uncancellable"
        },
        {
          "id": 29266,
          "slug": "polygon-chain-reorgs-will-change-mystery-box-tiers-which-can-be-gamed-by-validators-cyfrin-none-cyfrin-mode-earnm-markdown",
          "title": "Polygon chain reorgs will change mystery box tiers which can be gamed by validators"
        },
        {
          "id": 13334,
          "slug": "router-provide-and-enforce-safe-defaults-config-consensys-connext-nxtp-noncustodial-xchain-transfer-protocol-markdown",
          "title": "Router - Provide and enforce safe defaults (config)"
        }
      ],
      "slug": "block-depth-used-does-not-offer-guarantees-against-reorgs-under-edge-cases-spearbit-none-redacted-dinero-infrastructure-pdf",
      "source_link": "https://github.com/spearbit/portfolio/blob/master/pdfs/Redacted-Dinero-Infrastructure-Security-Review.pdf",
      "sponsor_name": null,
      "summary": "\nThis bug report is about a risk of medium severity in the cdk-dinero-keeper/src/functions/update-validator-stats/index.ts#L226. The current value of CONFIRMATION_BLOCKS=30 would be historically safe, but offers no guarantees in edge/attack cases against reorgs and non-finality incidents.\n\nThe recommendation is to use a notion of finalized blocks instead, as this would represent the finalized state of the network. This data would be older, but it would also mean that in case of a non-finality incident, the value would be stuck in the past unless the network is healthy again. Additionally, this could be an advantage as it would stop any actions being taken on data that might change or funds being spent that should not have been.\n\nThe recommendation was followed and a fix was applied in PR 56 at commit 3772bdd8.",
      "tag_list": [],
      "title": "Block depth used does not offer guarantees against reorgs under edge cases",
      "user_note": {
        "created_at": null,
        "note": ""
      }
    },
    {
      "bookmarked": false,
      "bookmarked_total": 1,
      "change_logs": [],
      "content": "##### Description\nThis issue has been identified in the [`depositEthAndRegisterValidators`](https://github.com/p2p-org/p2p-ssv-proxy/blob/9dd4728002d9c275e29e8ba38bcf7d90efc7531b/src/p2pSsvProxyFactory/P2pSsvProxyFactory.sol#L421C26-L433) function of the `P2pSsvProxyFactory` contract.\nThis function permits transferring any specified amount of `SsvToken` to the newly created `SsvCluster` in the `SsvNetwork`. The issue arises from the lack of restrictions on the `SsvPayload.tokenAmount` parameter, enabling users to drain the entire `SsvToken` balance by depositing `32 ETH`. Consequently, these tokens can only be recovered through a multi-step process where the owner has to [withdraw](https://github.com/p2p-org/p2p-ssv-proxy/blob/9dd4728002d9c275e29e8ba38bcf7d90efc7531b/src/p2pSsvProxy/P2pSsvProxy.sol#L290) the total amount from the `SsvCluster` and then [transfer](https://github.com/p2p-org/p2p-ssv-proxy/blob/9dd4728002d9c275e29e8ba38bcf7d90efc7531b/src/p2pSsvProxy/P2pSsvProxy.sol#L306) it from the corresponding `P2pSsvProxy` back to `P2pSsvProxyFactory`. Moreover, the attacker retains control over their deposit and can withdraw it using their specified `withdrawCredentials`. \nThis vulnerability is classified as `high` severity due to its potential to block deposits from subsequent clients until the owner intervenes.\n\n##### Recommendation\nWe recommend limiting the maximum value of `SSVToken` tokens transferred to a reasonable amount to prevent system block due to actions of unprivileged users and to enhance the system's overall security.\n\n\n\n",
      "contest_link": "",
      "contest_prize_txt": "",
      "editor_comments": [],
      "finder_list": [
        "MixBytes"
      ],
      "finders_count": 1,
      "general_score": 0,
      "github_dicussion_no": 23357,
      "github_link": "",
      "id": 29417,
      "impact": "HIGH",
      "issue_protocol": {
        "category_list": [],
        "id": 1185,
        "name": "P2P.org"
      },
      "issue_source": {
        "has_contest": false,
        "logo_horizontal_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_horizontal.png",
        "logo_square_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_square.png",
        "name": "MixBytes",
        "url": "https://mixbytes.io/"
      },
      "kind": "MARKDOWN",
      "markasread": false,
      "openai_explained": true,
      "pdf_link": "",
      "pdf_page_from": 0,
      "quality_score": 0,
      "report_date": "2023-12-15T00:00:00Z",
      "similar_issue_list": [
        {
          "id": 27673,
          "slug": "lack-of-sanity-checks-on-the-oracle-report-update-mixbytes-none-mantle-network-markdown",
          "title": "Lack of sanity checks on the Oracle report update"
        },
        {
          "id": 29387,
          "slug": "m-04-malicious-users-can-front-run-to-cause-a-denial-of-service-dos-for-stakedusde-due-to-minshares-checks-code4rena-ethena-labs-ethena-labs-git",
          "title": "[M-04] Malicious users can front-run to cause a denial of service (DoS) for StakedUSDe due to MinShares checks"
        },
        {
          "id": 5939,
          "slug": "m-31-vaults-can-be-griefed-to-not-be-able-to-be-used-for-deposits-code4rena-stakehouse-protocol-lsd-network-stakehouse-contest-git",
          "title": "[M-31] Vaults can be griefed to not be able to be used for deposits"
        }
      ],
      "slug": "depositethandregistervalidators-allows-unauthorized-users-to-drain-the-ssvtoken-balance-mixbytes-none-p2porg-markdown",
      "source_link": "https://github.com/mixbytes/audits_public/blob/master/P2P.org/SSV%20Integration/README.md#1-depositethandregistervalidators-allows-unauthorized-users-to-drain-the-ssvtoken-balance",
      "sponsor_name": null,
      "summary": "\nThis bug report is about a vulnerability in the `depositEthAndRegisterValidators` function of the `P2pSsvProxyFactory` contract. This function allows users to transfer any amount of `SsvToken` to the newly created `SsvCluster` in the `SsvNetwork`. The issue is that the `SsvPayload.tokenAmount` parameter has no restrictions, allowing users to drain the entire `SsvToken` balance by depositing 32 ETH. This can be recovered through a multi-step process, but the attacker still has control over their deposit and can withdraw it. This vulnerability is classified as `high` severity as it can block deposits from subsequent clients until the owner intervenes. To prevent this, it is recommended to limit the maximum value of `SSVToken` tokens transferred to a reasonable amount to enhance the system's security.",
      "tag_list": [],
      "title": "`depositEthAndRegisterValidators()` allows unauthorized users to drain the `SsvToken` balance",
      "user_note": {
        "created_at": null,
        "note": ""
      }
    },
    {
      "bookmarked": false,
      "bookmarked_total": 0,
      "change_logs": [],
      "content": "##### Description\nThe issue is found in [`setAllowedSelectorsForClient`](https://github.com/p2p-org/p2p-ssv-proxy/blob/9dd4728002d9c275e29e8ba38bcf7d90efc7531b/src/p2pSsvProxyFactory/P2pSsvProxyFactory.sol#L285) and [`setAllowedSelectorsForOperator`](https://github.com/p2p-org/p2p-ssv-proxy/blob/9dd4728002d9c275e29e8ba38bcf7d90efc7531b/src/p2pSsvProxyFactory/P2pSsvProxyFactory.sol#L304) functions of `P2pSsvProxyFactory` contract.\nThese functions currently grant access rights for invoking `SsvNetwork` functions directly by `client` and `operator` through [`P2pSsvProxy.fallback`](https://github.com/p2p-org/p2p-ssv-proxy/blob/9dd4728002d9c275e29e8ba38bcf7d90efc7531b/src/p2pSsvProxy/P2pSsvProxy.sol#L154-L156) but do not provide a mechanism to revoke these rights. This shortfall presents a significant security risk, especially in scenarios where excessive permissions are incorrectly assigned by the `owner`. Additionally, the `ssvNetwork` is an upgradeable proxy contract, and the inability to revoke rights in the event of an interface change further increases the vulnerability. \nThis issue is classified as `medium` due to the risks associated with the irreversibility of incorrectly granted access.\n\n##### Recommendation\nTo mitigate this risk, it is recommended to introduce `onlyOwner` functions that enable the revocation of rights for both the `client` and `operator` in invoking specific functions of the `SsvNetwork` through `P2pSsvProxy`.\n\n\n",
      "contest_link": "",
      "contest_prize_txt": "",
      "editor_comments": [],
      "finder_list": [
        "MixBytes"
      ],
      "finders_count": 1,
      "general_score": 0,
      "github_dicussion_no": 23356,
      "github_link": "",
      "id": 29418,
      "impact": "MEDIUM",
      "issue_protocol": {
        "category_list": [],
        "id": 1185,
        "name": "P2P.org"
      },
      "issue_source": {
        "has_contest": false,
        "logo_horizontal_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_horizontal.png",
        "logo_square_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/mixbytes_square.png",
        "name": "MixBytes",
        "url": "https://mixbytes.io/"
      },
      "kind": "MARKDOWN",
      "markasread": false,
      "openai_explained": true,
      "pdf_link": "",
      "pdf_page_from": 0,
      "quality_score": 0,
      "report_date": "2023-12-15T00:00:00Z",
      "similar_issue_list": [
        {
          "id": 29417,
          "slug": "depositethandregistervalidators-allows-unauthorized-users-to-drain-the-ssvtoken-balance-mixbytes-none-p2porg-markdown",
          "title": "`depositEthAndRegisterValidators()` allows unauthorized users to drain the `SsvToken` balance"
        },
        {
          "id": 28037,
          "slug": "front-run-attack-on-the-deployment-of-ensowalletfactory-mixbytes-none-enso-finance-markdown",
          "title": "Front-run attack on the deployment of EnsoWalletFactory"
        },
        {
          "id": 6774,
          "slug": "factory-owner-can-steal-user-funds-approved-to-the-router-spearbit-sudoswap-pdf",
          "title": "Factory Owner can steal user funds approved to the Router"
        }
      ],
      "slug": "inability-to-revoke-rights-given-in-setallowedselectorsforclient-and-setallowedselectorsforoperator-mixbytes-none-p2porg-markdown",
      "source_link": "https://github.com/mixbytes/audits_public/blob/master/P2P.org/SSV%20Integration/README.md#1-inability-to-revoke-rights-given-in-setallowedselectorsforclient-and-setallowedselectorsforoperator",
      "sponsor_name": null,
      "summary": "\nThis bug report concerns the P2pSsvProxyFactory contract, which grants access rights to the SsvNetwork functions for both the client and the operator. However, there is currently no mechanism to revoke those rights. This presents a security risk, as excessive permissions could be incorrectly assigned by the owner, and the SsvNetwork is an upgradeable proxy contract. This issue is classified as medium due to the risks associated with the irreversibility of incorrectly granted access.\n\nTo address this issue, it is recommended to introduce functions that enable the revocation of rights for both the client and the operator in invoking specific functions of the SsvNetwork through P2pSsvProxy. These functions should be restricted to the owner only, to ensure that the access rights can be revoked in the event of an interface change.",
      "tag_list": [],
      "title": "Inability to revoke rights given in `setAllowedSelectorsForClient` and `setAllowedSelectorsForOperator`",
      "user_note": {
        "created_at": null,
        "note": ""
      }
    },
    {
      "bookmarked": false,
      "bookmarked_total": 2,
      "change_logs": [],
      "content": "# Issue H-1: when reservedUntilTokenId > 100 first funder loss 1% NFT \n\nSource: https://github.com/sherlock-audit/2023-09-nounsbuilder-judging/issues/42 \n\n## Found by \n0x52, 0xReiAyanami, 0xbepresent, 0xcrunch, 0xmystery, 0xpep7, Aamirusmani1552, Ch\\_301, Falconhoof, HHK, Jiamin, Juntao, KingNFT, Kow, Krace, KupiaSec, Nyx, SilentDefendersOfDeFi, SovaSlava, almurhasan, ast3ros, bin2chen, cawfree, chaduke, circlelooper, coffiasd, dany.armstrong90, deepkin, dimulski, ge6a, ggg\\_ttt\\_hhh, giraffe, gqrp, pontifex, qpzm, rvierdiiev, saian, unforgiven, whoismxuse, xAriextz, ydlee, zraxx\n## Summary\nThe incorrect use of `baseTokenId = reservedUntilTokenId` may result in the first `tokenRecipient[]` being invalid, thus preventing the founder from obtaining this portion of the NFT.\n\n## Vulnerability Detail\n\nThe current protocol adds a parameter `reservedUntilTokenId` for reserving `Token`.\nThis parameter will be used as the starting `baseTokenId` during initialization.\n\n```solidity\n    function _addFounders(IManager.FounderParams[] calldata _founders, uint256 reservedUntilTokenId) internal {\n...\n\n                // Used to store the base token id the founder will recieve\n@>              uint256 baseTokenId = reservedUntilTokenId;\n\n                // For each token to vest:\n                for (uint256 j; j < founderPct; ++j) {\n                    // Get the available token id\n                    baseTokenId = _getNextTokenId(baseTokenId);\n\n                    // Store the founder as the recipient\n                    tokenRecipient[baseTokenId] = newFounder;\n\n                    emit MintScheduled(baseTokenId, founderId, newFounder);\n\n                    // Update the base token id\n                    baseTokenId = (baseTokenId + schedule) % 100;\n                }\n            }\n..\n\n    function _getNextTokenId(uint256 _tokenId) internal view returns (uint256) {\n        unchecked {\n@>          while (tokenRecipient[_tokenId].wallet != address(0)) {\n                _tokenId = (++_tokenId) % 100;\n            }\n\n            return _tokenId;\n        }\n    }\n```\n\nBecause `baseTokenId = reservedUntilTokenId` is used, if `reservedUntilTokenId>100`, for example, reservedUntilTokenId=200, the first `_getNextTokenId(200)` will return `baseTokenId=200 ,  tokenRecipient[200]=newFounder`.\n\nExample:\nreservedUntilTokenId = 200\nfounder[0].founderPct = 10\n\nIn this way, the `tokenRecipient[]` of `founder` will become\ntokenRecipient[200].wallet = founder   ( first will call _getNextTokenId(200) return 200)\ntokenRecipient[10].wallet = founder      ( second will call _getNextTokenId((200 + 10) %100 = 10) )\ntokenRecipient[20].wallet = founder\n...\ntokenRecipient[90].wallet = founder\n\n\nHowever, this `tokenRecipient[200]` will never be used, because in `_isForFounder()`, it will be modulo, so only `baseTokenId < 100` is valid. In this way, the first founder can actually only `9%` of NFT.\n\n```solidity\n    function _isForFounder(uint256 _tokenId) private returns (bool) {\n        // Get the base token id\n@>      uint256 baseTokenId = _tokenId % 100;\n\n        // If there is no scheduled recipient:\n        if (tokenRecipient[baseTokenId].wallet == address(0)) {\n            return false;\n\n            // Else if the founder is still vesting:\n        } else if (block.timestamp < tokenRecipient[baseTokenId].vestExpiry) {\n            // Mint the token to the founder\n@>          _mint(tokenRecipient[baseTokenId].wallet, _tokenId);\n\n            return true;\n\n            // Else the founder has finished vesting:\n        } else {\n            // Remove them from future lookups\n            delete tokenRecipient[baseTokenId];\n\n            return false;\n        }\n    }\n```\n\n## POC\n\nThe following test demonstrates that `tokenRecipient[200]` is for founder.\n\n1. need change tokenRecipient to public , so can assertEq\n```diff\ncontract TokenStorageV1 is TokenTypesV1 {\n    /// @notice The token settings\n    Settings internal settings;\n\n    /// @notice The vesting details of a founder\n    /// @dev Founder id => Founder\n    mapping(uint256 => Founder) internal founder;\n\n    /// @notice The recipient of a token\n    /// @dev ERC-721 token id => Founder\n-   mapping(uint256 => Founder) internal tokenRecipient;\n+   mapping(uint256 => Founder) public tokenRecipient;\n}\n```\n\n2. add to `token.t.sol`\n```solidity\n    function test_lossFirst(address _minter, uint256 _reservedUntilTokenId, uint256 _tokenId) public {\n        deployAltMock(200);\n        (address wallet ,,)= token.tokenRecipient(200);\n        assertEq(wallet,founder);\n    }\n```\n\n```console\n$ forge test -vvv --match-test test_lossFirst\n\nRunning 1 test for test/Token.t.sol:TokenTest\n[PASS] test_lossFirst(address,uint256,uint256) (runs: 256, μ: 3221578, ~: 3221578)\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 355.45ms\nRan 1 test suites: 1 tests passed, 0 failed, 0 skipped (1 total tests)\n\n```\n\n## Impact\n\nwhen reservedUntilTokenId > 100 first funder loss 1% NFT\n\n## Code Snippet\n\nhttps://github.com/sherlock-audit/2023-09-nounsbuilder/blob/main/nouns-protocol/src/token/Token.sol#L161\n\n## Tool used\n\nManual Review\n\n## Recommendation\n1. A better is that the baseTokenId always starts from 0.\n```diff\n    function _addFounders(IManager.FounderParams[] calldata _founders, uint256 reservedUntilTokenId) internal {\n...\n\n                // Used to store the base token id the founder will recieve\n-               uint256 baseTokenId = reservedUntilTokenId;\n+               uint256 baseTokenId =0;\n```\nor\n\n2. use `uint256 baseTokenId = reservedUntilTokenId  % 100;`\n```diff\n    function _addFounders(IManager.FounderParams[] calldata _founders, uint256 reservedUntilTokenId) internal {\n...\n\n                // Used to store the base token id the founder will recieve\n-               uint256 baseTokenId = reservedUntilTokenId;\n+               uint256 baseTokenId = reservedUntilTokenId  % 100;\n```\n\n\n\n## Discussion\n\n**neokry**\n\nThis is valid and is the core issue behind #247 as well. baseTokenId should start at 0 in `addFounders`\n\n**nevillehuang**\n\nI initially separated the 4 findings below, but I agree, #177, #247 and #67 are only possible because of the following lines of code [here](https://github.com/sherlock-audit/2023-09-nounsbuilder/blob/main/nouns-protocol/src/token/Token.sol#L161), wherein `_addFounder()`, `baseTokenId` is incorrectly initialized to `reservedUntilTokenId ` in `addFounders()`, which is the root cause of the issue, and once fixed, all the issues will be fixed too. There are 4 impacts mentioned by watsons. \n\n```solidity\nuint256 baseTokenId = reservedUntilTokenId;\n```\n\n1. Previous founders that are meant to be deleted are retained causing them to continue receiving minted NFTs --> High severity, since it is a definite loss of funds\n\n2. #247: Any `reserveTokenId` greater than 100 will cause a 1% loss of NFT for founder --> High severity, since it is a definite loss of funds for founder as long as `reservedUntilTokenId ` is set greater than 100, which is not unlikely\n\n3. #177: This is essentially only an issue as `baseTokenId` is incorrectly set as `reservedUntilTokenId` but will cause a definite loss of founders NFT if performed, so keeping as duplicate\n\n4. #67: This is closely related to the above finding (177), where a new update to `reservedUntilTokenId` via `setReservedUntilTokenId` can cause over/underallocation NFTs so keeping as duplicate\n\n\nHowever, in the context of the audit period, I could also see why watsons separated these issues, so happy to hear from watsons during escalation period revolving deduplication of these issues.\n\n**neokry**\n\nFixed here: https://github.com/ourzora/nouns-protocol/pull/122\n\n**nevillehuang**\n\nHi @neokry would be helpful if you could highlight to watsons here why you think the following primary issues should be duplicated under this issue:\n\n#67\n#177\n#247 \n\nFrom my understanding it stems from the `_addFounders()` function used in both the `initialize()` and `updateFounders()` function, in particular the following line [here](https://github.com/sherlock-audit/2023-09-nounsbuilder/blob/main/nouns-protocol/src/token/Token.sol#L161), \n```solidity\nuint256 baseTokenId = reservedUntilTokenId;\n```\n\nBut it would be extremely helpful if you could provide a more detailed explanation in each finding, and show how the fix to #42 also fixes the rest of the findings.\n\nTo all watsons, this is my initial deduplication [here](https://discord.com/channels/812037309376495636/1176899915411099719/1184507360765546556), feel free to also provide me the flow state of the functions to prove that they do not have the same root cause.\n\n**nevillehuang**\n\nHi watsons, \nThe core of issue #42 is that `baseTokenId` should not start with `reservedUntilTokenId ` within `addFounders()`\n\n#67 and its duplicates\nI believe this issue and its duplicates are invalid as there is a misunderstanding of how founders token amount are assigned based on this [comment here](https://github.com/sherlock-audit/2023-09-nounsbuilder-judging/issues/67#issuecomment-1856255695)\n\nBoth #177 and #247 and its duplicates\nThis issue hinges on the same root cause that `baseTokenId` is initialized as `reservedUntilTokenId `. However, the key difference here is that `updateFounders()` is also affected, which is a completely different function. However, I still think that this should be duplicated with #42, based on [sherlock duplication rules](https://docs.sherlock.xyz/audits/judging/judging#ix.-duplication-rules), more specifically, see point 1.1 and 2. The only point where they cannot be considered duplicates is when the fixes are different. \n\nUnless a watson can prove to me that the fix implemented [here](https://github.com/ourzora/nouns-protocol/pull/122/commits/5f12ca4a21aaae6ca1289e5517d3545a27325366) by the sponsor is insufficient, I am inclined to keep all of them as duplicates except the above mentioned #67 and its duplicates.\n\n",
      "contest_link": "https://app.sherlock.xyz/audits/contests/111",
      "contest_prize_txt": "33500 USDC",
      "editor_comments": [],
      "finder_list": [
        "0x52",
        "rvierdiiev",
        "bin2chen",
        "unforgiven",
        "saian",
        "Ch\\_301",
        "Nyx",
        "KingNFT",
        "0xbepresent",
        "chaduke",
        "ast3ros",
        "SovaSlava",
        "Juntao",
        "Krace",
        "xAriextz",
        "qpzm",
        "Jiamin",
        "circlelooper",
        "pontifex",
        "HHK",
        "dimulski",
        "0xcrunch",
        "Kow",
        "dany.armstrong90",
        "KupiaSec",
        "0xmystery",
        "coffiasd",
        "Aamirusmani1552",
        "0xReiAyanami",
        "0xpep7",
        "zraxx",
        "SilentDefendersOfDeFi",
        "ge6a",
        "ggg\\_ttt\\_hhh",
        "deepkin",
        "almurhasan",
        "giraffe",
        "gqrp",
        "cawfree",
        "Falconhoof",
        "whoismxuse",
        "ydlee"
      ],
      "finders_count": 42,
      "general_score": 0,
      "github_dicussion_no": 23351,
      "github_link": "https://github.com/sherlock-audit/2023-09-nounsbuilder-judging/issues/42",
      "id": 29423,
      "impact": "HIGH",
      "issue_protocol": {
        "category_list": [
          {
            "description": "Protocols that enable you to earn staking rewards on your tokens while also providing a tradeable and liquid receipt for your staked position",
            "title": "Liquid Staking"
          },
          {
            "description": "Protocols that mint its own stablecoin using collateralized lending",
            "title": "CDP"
          },
          {
            "description": "Protocols that provide a service to the user",
            "title": "Services"
          },
          {
            "description": "Protocols that launch new projects and coins",
            "title": "Launchpad"
          },
          {
            "description": "Protocol that created a tokenized derivative that mimics the value of another asset.",
            "title": "Synthetics"
          }
        ],
        "id": 157,
        "name": "Nouns Builder"
      },
      "issue_source": {
        "has_contest": true,
        "logo_horizontal_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/sherlock_horizontal.png",
        "logo_square_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/sherlock_square.png",
        "name": "Sherlock",
        "url": "https://sherlock.xyz"
      },
      "kind": "GIT",
      "markasread": false,
      "openai_explained": true,
      "pdf_link": "",
      "pdf_page_from": 0,
      "quality_score": 0,
      "report_date": "2023-12-01T15:00:00Z",
      "similar_issue_list": [
        {
          "id": 27928,
          "slug": "nextcollectionid-should-be-limited-mixbytes-none-fantium-markdown",
          "title": "`nextCollectionId` should be limited"
        },
        {
          "id": 3271,
          "slug": "m-04-founders-can-receive-less-tokens-that-expected-code4rena-nouns-builder-nouns-builder-contest-git",
          "title": "[M-04] Founders can receive less tokens that expected"
        },
        {
          "id": 3288,
          "slug": "m-21-truncation-in-casting-can-lead-to-a-founder-receiving-all-the-base-tokens-code4rena-nouns-builder-nouns-builder-contest-git",
          "title": "[M-21] Truncation in casting can lead to a founder receiving all the base tokens"
        }
      ],
      "slug": "h-1-when-reserveduntiltokenid-100-first-funder-loss-1-nft-sherlock-nouns-builder-git",
      "source_link": "",
      "sponsor_name": "",
      "summary": "\nThis bug report is about an issue in the Nouns Protocol where, when `reservedUntilTokenId > 100`, the first `tokenRecipient[]` is invalid, thus preventing the founder from obtaining this portion of the NFT. This is due to the incorrect use of `baseTokenId = reservedUntilTokenId` in the code. This can be demonstrated by a test in `token.t.sol` which asserts that `tokenRecipient[200]` is for the founder. This issue is of high severity as it results in a definite loss of funds for the founder. \n\nThe root cause of this issue is the incorrect initialization of `baseTokenId` in `addFounders()`. This issue is related to #177, #247 and #67, which are all caused by the same root cause. A fix has been implemented in the code by the sponsor which resolves this issue.",
      "tag_list": [],
      "title": "H-1: when reservedUntilTokenId > 100 first funder loss 1% NFT",
      "user_note": {
        "created_at": null,
        "note": ""
      }
    },
    {
      "bookmarked": false,
      "bookmarked_total": 3,
      "change_logs": [],
      "content": "# Issue H-2: Adversary can permanently brick auctions due to precision error in Auction#_computeTotalRewards \n\nSource: https://github.com/sherlock-audit/2023-09-nounsbuilder-judging/issues/251 \n\n## Found by \n0x52, Bauer, Brenzee, HHK, Kow, KupiaSec, SilentDefendersOfDeFi, coffiasd, cu5t0mPe0, dany.armstrong90, ggg\\_ttt\\_hhh, gqrp, pontifex, unforgiven, xAriextz\n## Summary\n\nWhen batch depositing to ProtocolRewards, the msg.value is expected to match the sum of the amounts array EXACTLY. The issue is that due to precision loss in Auction#_computeTotalRewards this call can be engineered to always revert which completely bricks the auction process.\n\n## Vulnerability Detail\n\n[ProtocolRewards.sol#L55-L65](https://github.com/ourzora/zora-protocol/blob/8d1fe9bdd79a552a8f74b4712451185f6aebf9a0/packages/protocol-rewards/src/ProtocolRewards.sol#L55-L65)\n\n        for (uint256 i; i < numRecipients; ) {\n            expectedTotalValue += amounts[i];\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        if (msg.value != expectedTotalValue) {\n            revert INVALID_DEPOSIT();\n        }\n\nWhen making a batch deposit the above method is called. As seen, the call with revert if the sum of amounts does not EXACTLY equal the msg.value.\n\n[Auction.sol#L474-L507](https://github.com/sherlock-audit/2023-09-nounsbuilder/blob/main/nouns-protocol/src/auction/Auction.sol#L474-L507)\n\n        uint256 totalBPS = _founderRewardBps + referralRewardsBPS + builderRewardsBPS;\n\n        ...\n\n        // Calulate total rewards\n        split.totalRewards = (_finalBidAmount * totalBPS) / BPS_PER_100_PERCENT;\n\n        ...\n\n        // Initialize arrays\n        split.recipients = new address[](arraySize);\n        split.amounts = new uint256[](arraySize);\n        split.reasons = new bytes4[](arraySize);\n\n        // Set builder reward\n        split.recipients[0] = builderRecipient;\n        split.amounts[0] = (_finalBidAmount * builderRewardsBPS) / BPS_PER_100_PERCENT;\n\n        // Set referral reward\n        split.recipients[1] = _currentBidRefferal != address(0) ? _currentBidRefferal : builderRecipient;\n        split.amounts[1] = (_finalBidAmount * referralRewardsBPS) / BPS_PER_100_PERCENT;\n\n        // Set founder reward if enabled\n        if (hasFounderReward) {\n            split.recipients[2] = founderReward.recipient;\n            split.amounts[2] = (_finalBidAmount * _founderRewardBps) / BPS_PER_100_PERCENT;\n        }\n\nThe sum of the percentages are used to determine the totalRewards. Meanwhile, the amounts are determined using the broken out percentages of each. This leads to unequal precision loss, which can cause totalRewards to be off by a single wei which cause the batch deposit to revert and the auction to be bricked. Take the following example:\n\nAssume a referral reward of 5% (500) and a builder reward of 5% (500) for a total of 10% (1000). To brick the contract the adversary can engineer their bid with specific final digits. In this example, take a bid ending in 19. \n\n    split.totalRewards = (19 * 1,000) / 100,000 = 190,000 / 100,000 = 1\n\n    split.amounts[0] = (19 * 500) / 100,000 = 95,000 / 100,000 = 0\n    split.amounts[1] = (19 * 500) / 100,000 = 95,000 / 100,000 = 0\n\nHere we can see that the sum of amounts is not equal to totalRewards and the batch deposit will revert. \n\n[Auction.sol#L270-L273](https://github.com/sherlock-audit/2023-09-nounsbuilder/blob/main/nouns-protocol/src/auction/Auction.sol#L270-L273)\n\n    if (split.totalRewards != 0) {\n        // Deposit rewards\n        rewardsManager.depositBatch{ value: split.totalRewards }(split.recipients, split.amounts, split.reasons, \"\");\n    }\n\nThe depositBatch call is placed in the very important _settleAuction function. This results in auctions that are permanently broken and can never be settled.\n\n## Impact\n\nAuctions are completely bricked\n\n## Code Snippet\n\n[Auction.sol#L244-L289](https://github.com/sherlock-audit/2023-09-nounsbuilder/blob/main/nouns-protocol/src/auction/Auction.sol#L244-L289)\n\n## Tool used\n\nManual Review\n\n## Recommendation\n\nInstead of setting totalRewards with the sum of the percentages, increment it by each fee calculated. This way they will always match no matter what.\n\n\n\n## Discussion\n\n**nevillehuang**\n\nContrary to #103 which only affects bidding, this causes a complete DoS of settlement of auctions, forcing the DAO to possibly have to redeploy to resolve the issue and continue auctions, so I believe high severity is fair.\n\n**neokry**\n\nFixed here: https://github.com/ourzora/nouns-protocol/pull/123\n\n",
      "contest_link": "https://app.sherlock.xyz/audits/contests/111",
      "contest_prize_txt": "33500 USDC",
      "editor_comments": [],
      "finder_list": [
        "0x52",
        "unforgiven",
        "Bauer",
        "xAriextz",
        "Brenzee",
        "pontifex",
        "HHK",
        "Kow",
        "dany.armstrong90",
        "KupiaSec",
        "coffiasd",
        "cu5t0mPe0",
        "SilentDefendersOfDeFi",
        "ggg\\_ttt\\_hhh",
        "gqrp"
      ],
      "finders_count": 15,
      "general_score": 0,
      "github_dicussion_no": 23350,
      "github_link": "https://github.com/sherlock-audit/2023-09-nounsbuilder-judging/issues/251",
      "id": 29424,
      "impact": "HIGH",
      "issue_protocol": {
        "category_list": [
          {
            "description": "Protocols that enable you to earn staking rewards on your tokens while also providing a tradeable and liquid receipt for your staked position",
            "title": "Liquid Staking"
          },
          {
            "description": "Protocols that mint its own stablecoin using collateralized lending",
            "title": "CDP"
          },
          {
            "description": "Protocols that provide a service to the user",
            "title": "Services"
          },
          {
            "description": "Protocols that launch new projects and coins",
            "title": "Launchpad"
          },
          {
            "description": "Protocol that created a tokenized derivative that mimics the value of another asset.",
            "title": "Synthetics"
          }
        ],
        "id": 157,
        "name": "Nouns Builder"
      },
      "issue_source": {
        "has_contest": true,
        "logo_horizontal_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/sherlock_horizontal.png",
        "logo_square_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/sherlock_square.png",
        "name": "Sherlock",
        "url": "https://sherlock.xyz"
      },
      "kind": "GIT",
      "markasread": false,
      "openai_explained": true,
      "pdf_link": "",
      "pdf_page_from": 0,
      "quality_score": 0,
      "report_date": "2023-12-01T15:00:00Z",
      "similar_issue_list": [
        {
          "id": 27552,
          "slug": "m-01-the-liquidity-mining-callpath-sidecar-owner-can-pull-native-tokens-from-the-dex-code4rena-canto-canto-git",
          "title": "[M-01] The Liquidity mining callpath sidecar owner can pull native tokens from the `Dex`"
        },
        {
          "id": 6599,
          "slug": "h-4-adversary-can-permanently-break-percentage-tier-bounties-by-funding-certain-erc20-tokens-then-refunding-sherlock-openq-openq-git",
          "title": "H-4: Adversary can permanently break percentage tier bounties by funding certain ERC20 tokens then refunding"
        },
        {
          "id": 13381,
          "slug": "zauction-incomplete-dead-code-zwithdraw-and-zdeposit-fixed-consensys-zer0-zauction-markdown",
          "title": "zAuction - incomplete / dead code zWithdraw and zDeposit ✓ Fixed"
        }
      ],
      "slug": "h-2-adversary-can-permanently-brick-auctions-due-to-precision-error-in-auction_computetotalrewards-sherlock-nouns-builder-git",
      "source_link": "",
      "sponsor_name": "",
      "summary": "\nThis bug report focuses on an issue found in the ProtocolRewards.sol and Auction.sol files of the Zora Protocol. When batch depositing to ProtocolRewards, the msg.value is expected to match the sum of the amounts array EXACTLY. Due to precision loss in Auction#_computeTotalRewards, this call can be engineered to always revert which completely bricks the auction process. In the Auction.sol file, the sum of the percentages are used to determine the totalRewards. Meanwhile, the amounts are determined using the broken out percentages of each, leading to unequal precision loss. This can cause totalRewards to be off by a single wei, which causes the batch deposit to revert and the auction to be bricked. When this happens, the DAO may have to redeploy the protocol to resolve the issue and continue auctions. The bug was fixed in a pull request on the Zora Protocol Github.",
      "tag_list": [],
      "title": "H-2: Adversary can permanently brick auctions due to precision error in Auction#_computeTotalRewards",
      "user_note": {
        "created_at": null,
        "note": ""
      }
    }
  ],
  "total_pages": 473
}